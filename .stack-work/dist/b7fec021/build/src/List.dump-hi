
==================== FINAL INTERFACE ====================
2017-01-23 23:49:05.6309612 UTC

interface haskell-project-0.1.0.0-40Qus2qNav6FY2bGilXhPo:List 8001
  interface hash: c1b95d7003102aff9842cbfc9f532f98
  ABI hash: 930c35e7a085113987b50513ecd08b75
  export-list hash: 03bfaa8f0a85c05a536d1d3a31b53baa
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 53494c7b8494714fedca6d8aca6be677
  sig of: Nothing
  used TH splices: False
  where
exports:
  List.safeHead
  List.safeTail
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
9a50479acad80d4694a3f19e0cccc71e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module List.$trModule2 List.$trModule1) -}
78c33794f0b5707fbcb3744ff2f8e152
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "List"#) -}
a05c1c6ab8bd949f4c0854b40acd3cea
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "haskell-project-0.1.0.0-40Qus2qNav6FY2bGilXhPo"#) -}
f3c97f1b0ab7e697b542a441cf0427de
  safeHead :: [a] -> GHC.Base.Maybe a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: [a]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ a : h t -> GHC.Base.Just @ a h }) -}
ea45a340e198a9840aa68faa605da760
  safeTail :: [a] -> GHC.Base.Maybe [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: [a]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ [a] : h t -> GHC.Base.Just @ [a] t }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

